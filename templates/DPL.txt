def save_images_to_dir(images, labels, dir_path):
    # create the directory if it doesn't exist
    if not os.path.exists(dir_path):
        os.makedirs(dir_path)
    # iterate over the images and labels
    for i, (image, label) in enumerate(zip(images, labels)):
        # get the class label
        class_label = np.argmax(label)
        # create the file path
        file_path = os.path.join(dir_path, f'image_{i}_class_{class_label}.png')
        # save the image to the file path
        plt.imsave(file_path, image.squeeze(), cmap='gray')
# Create an ImageDataGenerator for the training set
train_datagen = ImageDataGenerator(
    rescale=1./255,
    horizontal_flip=False,
    zoom_range = 0.1, 
    width_shift_range=0.1, 
    brightness_range=(0.95, 1.05),
    height_shift_range=0.1
    )
# Create an iterator for the training set
train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(img_res[0], img_res[1]),
    batch_size=sum([len(files) for r, d, files in os.walk(train_dir)]),
    class_mode='binary')

# Create an ImageDataGenerator for the validation set
val_datagen = ImageDataGenerator(
    rescale=1./255,
    horizontal_flip=False,
    zoom_range = 0.1, 
    width_shift_range=0.1, 
    brightness_range=(0.95, 1.05),
    height_shift_range=0.1)

# Create an iterator for the validation set
val_generator = val_datagen.flow_from_directory(
    validation_dir,
    target_size=(img_res[0], img_res[1]),
    batch_size=sum([len(files) for r, d, files in os.walk(validation_dir)]),
    class_mode='binary')

# Create an ImageDataGenerator for the test set
test_datagen = ImageDataGenerator(
    rescale=1./255,
    horizontal_flip=False,
    zoom_range = 0.1, 
    width_shift_range=0.1, 
    brightness_range=(0.95, 1.05),
    height_shift_range=0.1)

# Create an iterator for the test set
test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=(img_res[0], img_res[1]),
    batch_size=sum([len(files) for r, d, files in os.walk(test_dir)]),
    class_mode='binary')

# Load all images and labels into memory
x_train, y_train = next(iter(train_generator))
x_val, y_val = next(iter(val_generator))
x_test, y_test = next(iter(test_generator))

#GEN train data
for i in range(2):
    augmented_train_generator_IDG = ImageDataGenerator(
        rescale=1./255,
        horizontal_flip=True,
        rotation_range=180,
        zoom_range = 0.4, 
        width_shift_range=0.4, 
        brightness_range=(0.3, 1.7),
        height_shift_range=0.4
        )
    # Create an iterator for the training set
    augmented_train_generator = augmented_train_generator_IDG.flow_from_directory(
        train_dir,
        target_size=(img_res[0], img_res[1]),
        batch_size=sum([len(files) for r, d, files in os.walk(train_dir)]),
        class_mode='binary')
    x_train_augmented, y_train_augmented = augmented_train_generator.next()

    # Concatenate the original data with the augmented data
    x_train = np.concatenate([x_train, x_train_augmented])
    y_train = np.concatenate([y_train, y_train_augmented])
#GEN test data
for i in range(4):
    augmented_test_generator_IDG = ImageDataGenerator(
        rescale=1./255,
        horizontal_flip=True,
        rotation_range=180,
        zoom_range = 0.3, 
        width_shift_range=0.3, 
        brightness_range=(0.6, 1.6),
        height_shift_range=0.3
        )
    # Create an iterator for the training set
    augmented_test_generator = augmented_test_generator_IDG.flow_from_directory(
        test_dir,
        target_size=(img_res[0], img_res[1]),
        batch_size=sum([len(files) for r, d, files in os.walk(train_dir)]),
        class_mode='binary')
    x_test_augmented, y_test_augmented = augmented_test_generator.next()

    # Concatenate the original data with the augmented data
    x_test = np.concatenate([x_test, x_test_augmented])
    y_test = np.concatenate([y_test, y_test_augmented])
#to_categorical
y_train = to_categorical(y_train)
y_val = to_categorical(y_val)
y_test = to_categorical(y_test)

#BUG augmented_datagen not working fix it
# # Create another ImageDataGenerator with the desired options
# augmented_datagen = ImageDataGenerator(
#     horizontal_flip=False,
#     zoom_range=0.2,
#     rotation_range=20,
#     brightness_range=(0.9, 1.1),
#     width_shift_range=0.2,
#     height_shift_range=0.2)

# # Create an iterator for the training set
# augmented_train_generator = augmented_datagen.flow(x_train, y_train, batch_size=len(x_train))

# # Get the augmented data
# x_train_augmented, y_train_augmented = augmented_train_generator.next()

# # Concatenate the original data with the augmented data
# x_train = np.concatenate([x_train, x_train_augmented])
# y_train = np.concatenate([y_train, y_train_augmented])
#BUG_End
# save_images_to_dir(x_train_augmented, y_train_augmented, 'test_TS_B')

x_test = np.concatenate([x_test, x_val])
y_test = np.concatenate([y_test, y_val])

# Shuffle the training data
combined = list(zip(x_train, y_train))
shuffle(combined)
x_train, y_train = zip(*combined)

# Shuffle the validation data
combined = list(zip(x_val, y_val))
shuffle(combined)
x_val, y_val = zip(*combined)

# Shuffle the test data
combined = list(zip(x_test, y_test))
shuffle(combined)
x_test, y_test = zip(*combined)

# Convert back to numpy arrays
x_train = np.array(x_train)
y_train = np.array(y_train)
x_val = np.array(x_val)
y_val = np.array(y_val)
x_test = np.array(x_test)
y_test = np.array(y_test)

#save_images_to_dir(x_train, y_train, 'test_TS')